<%- include("../../views/partials/user/header.ejs") %>


  <!-- bootstrap core css -->
  <link rel="stylesheet" type="text/css" href="css/bootstrap.css" />

  <!--owl slider stylesheet -->
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/assets/owl.carousel.min.css" />
  <!-- nice select  -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/css/nice-select.min.css" integrity="sha512-CruCP+TD3yXzlvvijET8wV5WxxEh5H8P4cmz0RFbKK6FlZ2sYl3AEsKlLPHbniXKSrDdFewhbmBK5skbdsASbQ==" crossorigin="anonymous" />
  <!-- font awesome style -->
  <link href="css/font-awesome.min.css" rel="stylesheet" />

  <!-- Custom styles for this template -->
  <link href="css/style.css" rel="stylesheet" />
  <!-- responsive style -->
  <link href="css/responsive.css" rel="stylesheet" />





<style>
    @import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;500;600;700&display=swap");
*,
*::before,
*::after {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

html,
body {
  margin: 0;
  padding: 0;
  font-family: 'Open Sans', sans-serif;
  height: 100vh;
}

ul.breadcrumb {
  padding: 8px 16px;
  list-style: none;
  background-color: #eee;
}

ul.breadcrumb li {
  display: inline;
}

ul.breadcrumb li + li:before {
  padding: 8px;
  color: #060808;
  content: ">";
}

ul.breadcrumb li a {
  color: #295297;
  font-weight: bold;
  text-decoration: none;
}

h5 {
  font-weight: 400;
  color: #060808;
  text-transform: capitalize;
}

label {
  font-size: medium;
  font-weight: 400;
  color: #333741;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
}

input[type="text"],
input[type="email"],
input[type="password"],
input[type="month"] {
  width: 100%;
  border: 2px solid #333741;
  border-radius: 4px;
  padding: 8px 14px;
  margin: 8px 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

input[type="submit"] {
  background-color: #295297;
  border: 2px solid #295297;
  border-radius: 4px;
  color: white;
  padding: 8px 28px;
  text-decoration: none;
  margin: 4px 2px;
  cursor: pointer;
}

input[type="submit"]:focus,
input[type="submit"]:hover {
  background-color: #333741;
  border: 2px solid #333741;
}

select {
  width: 100%;
  padding: 8px 20px;
  margin: 8px 0;
  border: none;
  border-radius: 4px;
  border: 2px solid #333741;
}

.column {
  padding: 1rem;
}

.first-block form input[type="email"] {
  width: 100%;
}

.first-block form p {
  color: #333741;
  font-weight: 400;
  margin-top: 1rem;
  margin-bottom: 1rem;
}

.first-block form p > a:link,
.first-block form a:visited {
  color: #295297;
  font-weight: bold;
  text-decoration: none;
  margin-left: 6px;
}

.second-block p.shipping-address {
  text-transform: uppercase;
  font-weight: 600;
  color: #333741;
}

.second-block form small {
  color: #060808;
  font-weight: 400;
}

.second-block form p {
  color: #060808;
  margin: 1rem 0;
}

.second-block form p a:link,
.second-block form p a:visited {
  color: #333741;
  margin-left: 4px;
}

.second-block form .row {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  padding: 0 1rem;
}

.second-block form .row input[type="number"] {
  width: 100%;
  border: 2px solid #333741;
  border-radius: 4px;
  padding: 8px 14px;
  margin: 8px 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.third-block .shippping-methods {
  margin: 2rem 0;
  text-transform: uppercase;
  font-weight: 600;
  color: #333741;
}

.third-block .wrapper {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: auto;
      grid-template-columns: auto;
  margin: 1.5rem 0;
}

.third-block .shipping-icon img {
  margin-left: 5px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: 26px;
}

.third-block .shipping-info {
  padding: 0.7rem;
}

.third-block .shipping-info h6 {
  font-weight: 400;
  color: #333741;
}

.third-block .shipping-info p {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  text-align: left;
  font-weight: 400;
  color: #333741;
}

.third-block .shipping-info p span {
  font-weight: bold;
}

.option-buttons {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
}

.option-buttons a {
  padding: 8px 28px 8px 0px;
  text-decoration: none;
  margin: 4px 2px 4px 0px;
  color: #333741;
  font-weight: bold;
}

.fourth-block p.payment-method {
  margin: 2rem 0;
  text-transform: uppercase;
  font-weight: 600;
  color: #333741;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: auto 60%;
      grid-template-columns: auto 60%;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper .shipping-icon {
  padding-top: 1rem;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper .shipping-icon input {
  margin: auto;
  padding: 1rem 0;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper .shipping-icon img {
  margin-left: 5px;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  height: 26px;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  background-color: #f2f2f2;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .credit-card {
  color: #333741;
  font-weight: bold;
  font-size: small;
  margin-bottom: 1rem;
  padding: 0.4rem 0 0.3rem .7rem;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .credit-card input {
  margin-right: 5px;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .cards-info {
  display: inline-block;
  text-align: right;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .cards-info a:link,
.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .cards-info a:visited {
  text-decoration: none;
  color: #333741;
  margin-bottom: 1rem;
}

.fourth-block .form-1 .shipping-methods-wrapper .wrapper-cards .cards-info p > small {
  font-weight: normal;
  color: #333741;
}

.fourth-block .note {
  background-color: #d9d9d9;
  font-weight: bold;
  text-align: center;
  margin: auto 0;
}

.fourth-block .form-2 {
  padding: 1rem;
}

.fourth-block .form-2 .card-info {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: auto;
      grid-template-columns: auto;
}

/* .fourth-block .form-2 .sec-code {
  /* Chrome, Safari, Edge, Opera */
  /* Firefox */
 */

.fourth-block .form-2 .sec-code input[type="number"] {
  width: auto;
  border: 2px solid #333741;
  border-radius: 4px;
  padding: 8px 20px;
  margin: 8px 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.fourth-block .form-2 .sec-code input::-webkit-outer-spin-button,
.fourth-block .form-2 .sec-code input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}


.fourth-block .form-2 .sec-code p {
  color: #060808;
  margin: 1rem 0;
}

.fourth-block .form-2 .sec-code p a:link,
.fourth-block .form-2 .sec-code p a:visited {
  color: #333741;
  margin-left: 4px;
}

.fourth-block .billing-address {
  margin: 1rem;
  text-transform: uppercase;
  font-weight: 600;
  color: #333741;
}

.fourth-block .form-3 {
  padding: 1rem;
  /* Chrome, Safari, Edge, Opera */
  /* Firefox */
}

.fourth-block .form-3 p {
  color: #060808;
  margin: 1rem 0;
}

.fourth-block .form-3 p a:link,
.fourth-block .form-3 p a:visited {
  color: #333741;
  margin-left: 4px;
}

.fourth-block .form-3 input[type="number"] {
  width: auto;
  border: 2px solid #333741;
  border-radius: 4px;
  padding: 8px 20px;
  margin: 8px 0;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.fourth-block .form-3 input::-webkit-outer-spin-button,
.fourth-block .form-3 input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}


.fourth-block .form-3 .row {
  padding: 0 1rem;
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: auto;
      grid-template-columns: auto;
  grid-gap: 12px;
}

.pricing-info {
  -webkit-box-shadow: 2px 4px 8px 0 rgba(0, 0, 0, 0.1);
          box-shadow: 2px 4px 8px 0 rgba(0, 0, 0, 0.1);
  padding: 1rem;
  border-radius: 10px;
}

.pricing-info .order-summary {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: distribute;
      justify-content: space-around;
  padding-top: .5rem;
  margin: auto;
}

.pricing-info .order-summary h5 {
  color: #333741;
}

.pricing-info .order-summary p a {
  text-decoration: none;
  font-weight: bold;
  color: #295297;
}

.pricing-info .product {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: 100px auto;
      grid-template-columns: 100px auto;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.pricing-info .product .product-img {
  min-height: 40px;
  min-width: 40px;
  padding: .5rem;
}

.pricing-info .product .product-text {
  color: #333741;
  padding-top: .5rem;
}

.pricing-info .product .product-text h6 {
  font-weight: 400;
}

.pricing-info .product .product-text .price {
  font-weight: bold;
}

.pricing-info .costs {
  padding: 1rem .5rem;
  color: #333741;
}

.pricing-info .costs .cost {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
}

.pricing-info .costs .cost p a {
  text-decoration: none;
  font-weight: bold;
  color: #295297;
}
/*# sourceMappingURL=style.css.map */
.address-container {
    max-width: 500px;
    margin: 30px auto;
}
.address-card {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
    margin-bottom: 10px;
    padding: 15px;
    position: relative;
    transition: all 0.2s ease;
}
.address-card:hover {
    box-shadow: 0 4px 15px rgba(0,0,0,0.12);
    transform: translateY(-3px);
}
.address-card.selected {
    border: 2px solid #007bff;
    background-color: #f0f7ff;
}
.address-radio {
   position: absolute;
}
.address-details {
    margin-right: 30px;
}
.compact-actions {
    display: flex;
    align-items: center;
    margin-top: 10px;
    font-size: 0.9em;
}
.action-link {
    color: #007bff;
    cursor: pointer;
    margin-right: 10px;
}
.action-link:hover {
    text-decoration: underline;
}
.primary-badge {
    display: inline-flex;
    align-items: center;
    background-color: #0833aab8;
    color: white;
    border-radius: 20px;
    padding: 4px 10px;
    font-size: 0.8em;
    font-weight: 600;
    margin-left: 1rem;
    margin-top: 0px;
}
.primary-badge i {
    margin-right: 5px;
    font-size: 0.9em;
}
.card-form {
    display: none;
    margin-top: 15px;
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    transition: all 0.3s ease;
}

.card-form.active {
    display: block;
}

.coupon-dropdown {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.3s ease-out;
    background-color: #f9f9f9;
    border-radius: 8px;
}

.coupon-dropdown.active {
    max-height: 200px;
    padding: 15px;
    border: 1px solid #e0e0e0;
}

.coupon-input {
    display: flex;
    gap: 10px;
}

.coupon-input input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 5px;
}

.coupon-input button {
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    height: 2.9rem;
    margin-top: 7px;
}

.product-img img {
    border: 1px solid #ddd;
    box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
}

button {
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}

hr {
    border: none;
    border-top: 1px solid #ddd;
}

.coupon-container {
            max-width: 300px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border: 1px dashed #007bff;
            text-align: center;
            padding: 15px;
        }
        .coupon-discount {
            color: #007bff;
            margin-bottom: 10px;
        }
        .coupon-code {
            background-color: #f8f9fa;
            border: 1px dashed #007bff;
            padding: 8px;
            margin: 10px 0;
            font-weight: bold;
            letter-spacing: 1px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .coupon-code:hover {
            background-color: #e9ecef;
        }
        .coupon-code.copied {
            background-color: #28a745;
            color: white;
        }
        .btn-claim {
            width: 100%;
            font-size: 0.9rem;
            padding: 8px;
        }
        #copy-tooltip {
            display: none;
            color: green;
            font-size: 0.8rem;
            margin-top: 5px;
        }
</style>



</head>

<body class="sub_page">
  <!-- Cart section -->
  <nav aria-label="breadcrumb" class="breda m-5">
    <ol class="breadcrumb breadcrumb-custom">
      <li class="breadcrumb-item">
        <a href="/""><i class="fas fa-home me-2"></i>Home</a>
      </li>
      <li class="breadcrumb-item">
        <a href="/loadCart" onclick="return handleRemoveCoupon(event)">Cart</a>
      </li>
      <li class="breadcrumb-item active" aria-current="page">Product Checkout</li>
    </ol>
</nav>

<main class="container" style="margin-bottom:6rem ;">
    <div class="row d-flex justify-content-between">
        <div class="col-md-6 column">
          <section class="second-block">
            <h4><span><small>1.</small></span> Shipping details</h4>
            <h5 class="mb-3">Select Delivery Address</h5>
            <% if (addresses.length === 0) { %>
                <p>No addresses found. Please add one to place an order.</p>
            <% } else { %>
                <div id="primary-address" class="address-card selected position-relative">
                    <% const primaryAddress = addresses.find(address => address.isActive); %>
                    <% if (primaryAddress) { %>
                        <div class="form-check address-radio" style="margin-left: 31rem;">
                            <input class="form-check-input" type="radio" name="selectedAddress" value="<%= primaryAddress._id %>" checked onchange="selectAddress('<%= primaryAddress._id %>')">
                        </div>
                        <div class="address-details">
                            <div class="d-flex mb-2">
                                <h6 class="mb-1 mt-1"><%= primaryAddress.addressType %> Address</h6>
                                <div class="primary-badge">
                                    <i class="fas fa-check-circle"></i>
                                    Primary Address
                                </div>
                            </div>
                            <p class="text-muted mb-0">
                                <b><%= primaryAddress.name %></b>, <%= primaryAddress.landMark %><br>
                                <%= primaryAddress.locality %>, <%= primaryAddress.city %>, <%= primaryAddress.state %>, <%= primaryAddress.pincode %><br>
                                Phone: <%= primaryAddress.phone %>, <%= primaryAddress.altPhone %>
                            </p>
                            <div class="compact-actions">
                                <a href="/loadEditAddressPage?id=<%= primaryAddress._id %>"><span class="action-link">Edit</span></a>
                            </div>
                        </div>
                    <% } %>
                </div>
                <div id="secondary-addresses" style="display: none;">
                    <% addresses.forEach((address, index) => { %>
                        <% if (!address.isActive) { %>
                            <div class="address-card selected position-relative">
                                <div class="form-check address-radio" style="margin-left: 31rem;">
                                    <input class="form-check-input" id="address-<%= index %>" type="radio" name="selectedAddress" value="<%= address._id %>" onchange="selectAddress('<%= address._id %>')">
                                </div>
                                <div class="address-details">
                                    <div class="d-flex mb-2">
                                        <h6 class="mb-1 mt-1"><%= address.addressType %> Address</h6>
                                    </div>
                                    <p class="text-muted mb-0">
                                        <b><%= address.name %></b>, <%= address.landMark %><br>
                                        <%= address.locality %>, <%= address.city %>, <%= address.state %>, <%= address.pincode %><br>
                                        Phone: <%= address.phone %>, <%= address.altPhone %>
                                    </p>
                                    <div class="compact-actions">
                                        <a href="/loadEditAddressPage?id=<%= address._id %>"><span class="action-link">Edit</span></a>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    <% }); %>
                </div>
                <!-- Show More Addresses Button -->

                <div class="text-center mt-3">
                    <button class="btn btn-sm btn-outline-primary" id="show-more-addresses">
                        Show More Addresses
                    </button>
                </div>
                <!-- Add New Address Button -->
                <% } %>
                <div class="text-center mt-3">
                    <button class="btn btn-sm btn-outline-primary" id="toggleAddressForm" data-bs-toggle="modal" data-bs-target="#addAddressModal">
                        + Add New Address
                    </button>
                </div>
        </section>
                
            
            <hr style="border: none; border-top: 2px solid #0000007c; width: 100%;" class="my-4">
            <div class="fourth-block">
                <h4> <span><small>2.</small></span> Payment Details</h4>
                <p class="payment-method" style="margin-bottom: 0;"><small>Payment Methods</small></p>
                <form action="#" class="form-1">
                    <div class="shipping-methods-wrapper">
                        <div class="checkout__input__checkbox wrapper">
                            <div class="shipping-icon">
                              <label for="payment-COD">
                                <input type="radio" id="payment-COD" name="payment-method" checked>&nbsp Cash on Delivery
                              </label>
                            </div>
                        </div>
                        <div class="checkout__input__checkbox wrapper">
                          <div class="shipping-icon">
                            <label for="payment-RazorPay">
                              <input type="radio" id="payment-RazorPay" name="payment-method">&nbsp Online Payment
                            </label>
                          </div>                       
                        </div>
                        <div class="checkout__input__checkbox wrapper mb-3">
                          <div class="shipping-icon">
                            <label for="payment-Wallet">
                              <input type="radio" id="payment-Wallet" name="payment-method" >&nbsp Wallet Payment <br> (Balance: ₹<%= walletBalance.toFixed(2) %>)
                            </label>
                          </div>
                        </div>

                        <!-- <div class="checkout__input__checkbox wrapper-cards">
                            <div class="credit-card ml-1">
                              <label for="payment-card">
                                <input type="radio" id="credit-card-rrr" name="payment-method"> Credit Card
                              </label>
                            </div>
                            <div class="cards-info">
                                <a href="#"> <i class="fab fa-cc-visa"></i> </a>
                                <a href="#"> <i class="fab fa-cc-mastercard"></i> </a>
                                <a href="#"> <i class="fab fa-cc-amex"></i> </a>
                                <p><small>If your card is not on the list, let us know</small>
                                </p>
                            </div>
                        </div>
                        <div class="note">
                              <p><small> <i class="fas fa-lock"></i> This is a secure 128-bit SSL Encrypted payment.You're safe.</small></p>
                        </div> -->
                    </div>
                </form>
                <div id="card-form" class="card-form">
                  <h3>Enter Card Details</h3>
                  <form>
                      <div>
                          <label for="card-number">Card Number</label>
                          <input type="text" id="card-number" placeholder="1234 5678 9012 3456" required>
                      </div>
                      <div>
                          <label for="card-name">Cardholder Name</label>
                          <input type="text" id="card-name" placeholder="John Doe" required>
                      </div>
                      <div>
                          <label for="expiry">Expiry Date</label>
                          <input type="text" id="expiry" placeholder="MM/YY" required>
                      </div>
                      <div>
                          <label for="cvv">CVV</label>
                          <input type="text" id="cvv" placeholder="123" required>
                      </div>
                  </form>
              </div>
              <div class="option-buttons mt-3">
                  <input type="submit" value="Place order"  onclick="placeOrder()">
              </div>
            </div>
        </div>
        <div class="checkout__total__products col-md-4 column">
          <section class="pricing-info">
            <div class="order-summary">
                <h5><strong>Order Summary</strong></h5>
                <span class="fw-bold"><a href="/loadCart">Edit Cart</a></span>
            </div>
            <hr style="border: none; border-top: 2px solid #00000077; width: 100%; margin: 8px auto;">
            <ul class="checkout__total__products" style="list-style-type: none; padding: 0; margin: 0;">
                <% products.forEach((product, id) => { %>
                    <li class="product" style="display: flex; margin-bottom: 10px; align-items: center;">
                        <div class="product-img" style="flex: 0 0 84px; height: 80px; margin-right: 10px;">
                            <img src="<%= product.productImages[0].replace(/\\/g, '/') %>" alt="<%= product.productName %>" style="width: 100%; height: 100%; object-fit: cover; border-radius: 5px;">
                        </div>
                        <div class="product-details" style="flex: 1;">
                            <h6 id="productName" style="margin: 0;"><%= product.productName %></h6>
                            <span id="product-quantity" style="font-size: small; color: gray;">Quantity: <%= product.quantity %></span>
                        </div>
                        <div class="product-price" style="text-align: right;">
                            <span class="price" id="total-price">₹<%= product.totalPrice %></span>
                        </div>
                        <span class="d-none" id="productID">
                          <%= product.productId %>
                        </span>
                        <span class="d-none" id="userID">
                          <%= userId %>
                        </span>
                    </li>
                    <hr style="border: none; border-top: 1px solid #00000033; width: 100%; margin: 8px auto;">
                <% }); %>
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                  <span>Subtotal</span>
                    <span id="cart-subtotal">
                      <strong>₹&nbsp;<%= (products.reduce((total, product) => total + product.totalPrice, 0)).toFixed(2) %></strong>
                    </span>
                </li>
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                    <span>Tax (10%)</span>
                    <span id="cart-tax"><strong>₹&nbsp;<%= tax.toFixed(2) %></strong></span>
                </li>
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                    <span>Delivery Charges</span>
                    <span><strong>Free</strong></span>
                </li>
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                    <span>Offer Discount</span>
                    <span id="offerDiscount"><strong>-&nbsp;₹&nbsp;<%= totalOfferDiscount.toFixed(2) %></strong></span>
                </li>
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                  <div>
                      <span>Coupon Discount</span>
                      <button class="" id="removeCouponBtn" style="background-color: #ffffff; color: rgb(237, 14, 14); border: none; padding: 5px 10px; border-radius: 4px; cursor: pointer;"><i class="fa-solid fa-trash"></i></button>
                  </div>
                  <span id="couponDiscount"><strong>-&nbsp;₹&nbsp;<%= couponDiscount.toFixed(2) %></strong></span>
                </li>
              
                            
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                  <span class="fw-bold"><a href="#" id="coupon-toggle" style="text-decoration: none;">I Have a Coupon?</a></span>
                </li>
                <!-- Coupon Dropdown -->
                
                <div id="coupon-dropdown" style="display: none; margin-top: 10px; padding: 10px; border: 1px solid #ddd; border-radius: 5px;">
                  <div style="display: flex; gap: 10px; align-items: center;">
                      <form id="validateCouponForm" method="post">
                          <input type="text" name="couponCode" id="couponCode" placeholder="Enter coupon code" style="flex: 1; padding: 5px; border: 1px solid #ccc; border-radius: 4px;">
                          <button type="submit" style="padding: 5px 10px; border: none; background-color: #007bff; color: white; border-radius: 4px; cursor: pointer;">Apply</button>
                      </form>
                  </div>
                  <span class="text-danger" id="couponError" style="display: none; font-size: small;">Invalid Coupon!</span>
                </div>

                <hr style="border: none; border-top: 2px solid #00000077; width: 100%; margin: 8px auto;">
                <li class="cost" style="display: flex; justify-content: space-between; margin-bottom: 10px; font-size: 1.2em; font-weight: bold;">
                    <span>Grand Total</span>
                    <span id="cart-total">₹&nbsp;<%= (products.reduce((total, product) => total + product.totalPrice, tax - totalOfferDiscount -couponDiscount)).toFixed(2) %></span>
                </li>
            </ul>
          </section>
          <div id="coupon-list">
            <% if (coupons && coupons.length > 0) { %>
                <% coupons.slice(0, 2).forEach(coupon => { %>  
                    <div class="coupon-container my-3" style="margin-left: 2rem;">
                        <div class="coupon-discount">
                            <h3>Save ₹<%= coupon.offerPrice %></h3>
                        </div>
                        <p class="mb-1">On orders above ₹<%= coupon.minimumPrice %></p>
                        <p class="mb-2">(Expires on <%= new Date(coupon.expireOn).toLocaleDateString() %>)</p>
                        <div id="coupon-code" class="coupon-code">
                            <%= coupon.code %>
                        </div>
                        <div id="copy-tooltip">Copied!</div>
                    </div>
                <% }); %>
                <% if (coupons.length > 2) { %>
                    <button id="loadMoreCoupons" class="btn btn-outline-primary my-3" style="margin-left: 2rem;">Load More Coupons</button>
                    <button id="showLessCoupons" class="btn btn-outline-secondary my-3" style="margin-left: 2rem; display: none;">Show Less Coupons</button>
                <% } %>
            <% } else { %>
                <p>No available coupons.</p>
            <% } %>
        </div>
        </div>
    </div>
</main>
  <!-- Cart Section -->   



<!-- Modal for Add Address -->
<div class="modal fade" id="addAddressModal" tabindex="-1" aria-labelledby="addAddressModalLabel" aria-hidden="true">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title" id="addAddressModalLabel">Add Shipping Address</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <!-- Add Address Form -->
              <form action="/addAddress/<%= user._id %>" method="post">
                  <div class="form-group">
                    <label class="form-label">Address Type</label>
                      <select name="addressType" id="addressType" class="form-control  shadow ">
                          <option value="Home">Home</option>
                          <option value="Work">Work</option>
                      </select>
                  </div>
                  <br>
                  <br>
                  <div class="form-group">
                      <input type="text" name="name" class="form-control" id="fullName" placeholder="Enter your full name">
                      <small class="text-danger" id="fullNameError" style="display: none;">Full Name is required</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="phone" class="form-control" id="addAddressphone" placeholder="Enter your phone number">
                      <small class="text-danger" id="addAddressphoneError" style="display: none;">Phone is required and must be valid</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="altphone" class="form-control" id="addAddressaltphone" placeholder="Enter your alternative phone number">
                  </div>

                  <div class="form-group">
                      <input type="text" name="locality" class="form-control" id="street" placeholder="Enter your Locality">
                      <small class="text-danger" id="streetError" style="display: none;">Locality is required</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="city" class="form-control" id="city" placeholder="Enter your city">
                      <small class="text-danger" id="cityError" style="display: none;">City is required</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="state" class="form-control" id="state" placeholder="Enter your state">
                      <small class="text-danger" id="stateError" style="display: none;">State is required</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="landmark" class="form-control" id="landmark" placeholder="Enter your Landmark">
                      <small class="text-danger" id="landmarkError" style="display: none;">Landmark is required</small>
                  </div>

                  <div class="form-group">
                      <input type="text" name="pincode" class="form-control" id="zip" placeholder="Enter your ZIP code">
                      <small class="text-danger" id="zipError" style="display: none;">ZIP Code is required</small>
                  </div>
                  <div class="form-group">
                     <div class="form-check">
                          <input class="form-check-inline " type="checkbox" name="isActive" id="isActive" value="true" >
                          <label class="form-check-label" for="isActive">
                              Set as Primary Address
                          </label>
                      </div>
                  </div>
              </div>
              <div class="modal-footer">
                  <button type="button"  class="btn btn-primary" id="saveAddressBtn">Save Address</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              </div>
          </form>
      </div>
  </div>
</div>
</div>


<script>
  function selectAddress(addressId) {
      // Store the selected address ID in localStorage
      localStorage.setItem('selectedAddressId', addressId);

      // Unselect any previously selected address
      const previouslySelectedRadio = document.querySelector('input[name="selectedAddress"]:checked');
      if (previouslySelectedRadio) {
          previouslySelectedRadio.checked = false;
      }

      // Set the new selected address as checked
      const addressRadio = document.querySelector(`input[name="selectedAddress"][value="${addressId}"]`);
      if (addressRadio) {
          addressRadio.checked = true;
      }
  }

  // Retrieve the selected address from localStorage on page load
  document.addEventListener('DOMContentLoaded', function() {
      const selectedAddressId = localStorage.getItem('selectedAddressId');
      if (selectedAddressId) {
          const addressRadio = document.querySelector(`input[name="selectedAddress"][value="${selectedAddressId}"]`);
          if (addressRadio) {
              addressRadio.checked = true;
          }
      } else {
          // If no address is selected, check the primary address by default
          const primaryAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
          if (primaryAddressRadio) {
              primaryAddressRadio.checked = true;
          }
      }
  });
</script>


<script>
  document.getElementById('show-more-addresses').addEventListener('click', function() {
      var secondaryAddresses = document.getElementById('secondary-addresses');
      if (secondaryAddresses.style.display === 'none') {
          secondaryAddresses.style.display = 'block';
          this.textContent = 'Show Less Addresses';
      } else {
          secondaryAddresses.style.display = 'none';
          this.textContent = 'Show More Addresses';
      }
  });
</script>





<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
      const couponDiscountElement = document.getElementById('couponDiscount');
      const removeCouponBtn = document.getElementById('removeCouponBtn');
      const cartTotalElement = document.getElementById('cart-total');

      // Assuming 'couponDiscount' value is set as a global variable by backend or fetched from session
      const couponDiscount = parseFloat('<%= couponDiscount %>') || 0;

      if (couponDiscountElement && couponDiscount > 0) {
          couponDiscountElement.innerHTML = `<strong>-&nbsp;₹&nbsp;${couponDiscount.toFixed(2)}</strong>`;
      }

      // Add event listener to Remove Coupon button
      if (removeCouponBtn) {
          removeCouponBtn.addEventListener('click', function() {
              const userId = document.querySelector('#userID')?.textContent.trim();

              axios.post('/removeCoupon', { userId })
              .then(response => {
                  if (response.data.success) {
                      Swal.fire({
                          icon: 'success',
                          title: 'Coupon removed successfully!',
                          timer: 2000,
                          showConfirmButton: false
                      }).then(()=>{
                        if (cartTotalElement) {
                          const currentTotalText = cartTotalElement.textContent.replace('₹', '').trim(); 
                          const currentTotal = parseFloat(currentTotalText) || 0; 
                          console.log(`Current total before update: ${currentTotal}`); 
                          console.log(`Coupon discount to add back: ${couponDiscount}`); 
                          const updatedTotal = (currentTotal + couponDiscount).toFixed(2); 
                          console.log(`Updated total after coupon removal: ${updatedTotal}`);
                          cartTotalElement.textContent = `₹ ${updatedTotal}`;
                        }
                      })

                      // Update the cart total and remove coupon discount display

                      couponDiscountElement.innerHTML = `<strong>-&nbsp;₹&nbsp;0.00</strong>`;
                      removeCouponBtn.style.display = 'none';

                      setTimeout(() => {
                        window.location.reload()
                      }, 2000);
                      
                  } else {
                      Swal.fire({
                          icon: 'error',
                          title: 'Error!',
                          text: 'Failed to remove coupon. Please try again.',
                          timer: 2000,
                          showConfirmButton: false
                      });
                  }
              })
              .catch(error => {
                  console.error('Error removing coupon:', error);
                  Swal.fire({
                      icon: 'error',
                      title: 'Error!',
                      text: 'Failed to remove coupon. Please try again.',
                      timer: 2000,
                      showConfirmButton: false
                  });
              });
          });
      }
  });



    // Existing coupon validation script here...


    document.getElementById('validateCouponForm').addEventListener('submit', async function(event) {
    event.preventDefault(); // Prevent the default form submission

    const couponCode = document.getElementById('couponCode').value;
    const userId = document.querySelector('#userID')?.textContent.trim();
    const cartTotalElement = document.getElementById('cart-total');
    const couponDiscountElement = document.getElementById('couponDiscount');

    if (!userId) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'User ID is not available. Please log in.',
            timer: 2000,
            showConfirmButton: false
        });
        return;
    }

    if (!cartTotalElement) {
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: 'Cart total element not found.',
            timer: 2000,
            showConfirmButton: false
        });
        return;
    }

    const currentTotalText = cartTotalElement.textContent.replace('₹', '').trim();
    const cartTotal = parseFloat(currentTotalText);
    const removeCouponBtn = document.getElementById('removeCouponBtn');

    try {
        const response = await axios.post('/coupon', {
            couponCode,
            userId,
            cartTotal
        });
        const data = response.data;

        if (data.isValid) {
            Swal.fire({
                icon: 'success',
                title: 'Coupon applied successfully!',
                text: `You've got a discount of ₹${data.coupon.offerPrice}!`,
                timer: 2000,
                showConfirmButton: false
            });
            document.getElementById('couponError').style.display = 'none';

            const newTotal = cartTotal - data.coupon.offerPrice;
            cartTotalElement.textContent = `₹ ${newTotal.toFixed(2)}`;
            removeCouponBtn.style.display = 'block';

            // Update the coupon discount display
            couponDiscountElement.innerHTML = `<strong>-&nbsp;₹&nbsp;${data.coupon.offerPrice.toFixed(2)}</strong>`;


            // Avoid reload by removing the following code
            // setTimeout(() => {
            // }, 2000);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Invalid or expired coupon!',
                text: data.errorMessage,
                timer: 2000,
                showConfirmButton: false
            });
            document.getElementById('couponError').innerText = data.errorMessage;
            document.getElementById('couponError').style.display = 'block';
        }
    } catch (error) {
        console.error('Error validating coupon:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error validating coupon!',
            text: 'Please try again.',
            timer: 2000,
            showConfirmButton: false
        });
        document.getElementById('couponError').innerText = 'Error validating coupon. Please try again.';
        document.getElementById('couponError').style.display = 'block';
    }
});



  function gatherCheckoutData() {
    const orderedItems = [];
    document.querySelectorAll('.checkout__total__products li').forEach(item => {
        const productId = item.querySelector('#productID')?.textContent.trim();
        const price = parseFloat(item.querySelector('#total-price')?.textContent.trim().replace(/[^\d.]/g, '')) || 0;
        const quantity = parseInt(item.querySelector('#product-quantity')?.textContent.trim().replace(/\D/g, ''), 10) || 0;

        if (productId && price > 0 && quantity > 0) {
            orderedItems.push({ productId, quantity, price });
        }
    });

    const subtotal = parseFloat(document.querySelector('#cart-subtotal').innerText.replace('₹', '')) || 0;
    const tax = parseFloat(document.querySelector('#cart-tax').innerText.replace('₹', '')) || 0;
    const totalPrice = parseFloat(document.querySelector('#cart-total').innerText.replace('₹', '')) || 0;
    const selectedAddressId = document.querySelector('input[name="selectedAddress"]:checked')?.value;
    // const couponDiscounts = parseFloat(document.querySelector('#couponDiscount').innerText.replace('- ₹', '').trim()) || 0;
    const discount = parseFloat('<%= totalOfferDiscount %>');
    const couponApplied= '<%= discountApplied %>'



    if (selectedAddressId === undefined) {
        return Swal.fire({
            title: 'Select an address!',
            icon: 'warning',
            confirmButtonText: 'OK'
        }).then(() => location.reload());
    }

    const paymentMethod = document.querySelector('input[name="payment-method"]:checked')?.id.split('-')[1];
    return {
        orderedItems,
        subtotal,
        tax,
        totalPrice,
        selectedAddressId,
        paymentMethod,
        discount,
        couponApplied
    };
}


  

async function placeOrder() {
    const orderData = await gatherCheckoutData();
    console.log(orderData);
    const paymentMethod = document.querySelector('input[name="payment-method"]:checked')?.id.split('-')[1];
    console.log(paymentMethod);

    if (paymentMethod === 'COD') {
        if (orderData.totalPrice > 1000) {
            return Swal.fire({
                text: 'Orders above ₹1000 cannot be placed using Cash on Delivery. Please choose a different payment method.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
        }

        axios.post('/placeOrder', orderData)
            .then(response => {
                if (response.data.success) {
                    Swal.fire({
                        title: 'Order Success!',
                        text: 'Your order has been placed successfully!',
                        icon: 'success',
                        timer: 2000,
                        showConfirmButton: false,
                    }).then(() => {
                        const orderId = response.data.orderId;
                        window.location.href = `/orderSuccess?orderId=${orderId}`;
                    });
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Failed to place order. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            })
            .catch(error => {
                console.error('Error placing order:', error);
                Swal.fire({
                    title: 'Error!',
                    text: 'An error occurred. Check all details are entered and the quantity of the product is less than stock.',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            });
    } else if (paymentMethod === 'Wallet') {
        const walletBalance = '<%=walletBalance.toFixed(2)%>';
        if (orderData.totalPrice > walletBalance) {
            Swal.fire({
                text: 'Insufficient Wallet Balance. Please try another method.',
                icon: 'warning',
                confirmButtonText: 'OK'
            });
        } else {
            Swal.fire({
                title: 'Confirm Order',
                html: `<h5>Your wallet balance: <strong>₹${walletBalance}</strong></h5>
                    <h5>Total price: <strong>₹${orderData.totalPrice}</strong></h5>
                    <h5>Remaining balance after order: <strong>₹${(walletBalance - orderData.totalPrice).toFixed(2)}</strong></h5><br>
                    <h5>Do you want to proceed with the payment using your wallet?</h5>`,
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Yes, place order',
                cancelButtonText: 'No, cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    axios.post('/placeOrder', orderData)
                        .then(response => {
                            if (response.data.success) {
                                Swal.fire({
                                    title: 'Order Success!',
                                    text: 'Your order has been placed successfully!',
                                    icon: 'success',
                                    timer: 2000,
                                    showConfirmButton: false,
                                }).then(() => {
                                    const orderId = response.data.orderId;
                                    window.location.href = `/orderSuccess?orderId=${orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Failed to place order. Please try again.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error placing order:', error);
                            Swal.fire({
                                title: 'Error!',
                                text: 'An error occurred while placing your order. Please try again.',
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        });
                }
            });
        }
    } else if (paymentMethod === 'RazorPay') {
        console.log('Processing RazorPay payment...');
        const orderResponse = await axios.post('/placeOrder', orderData);
        if (orderResponse.data.success) {
            const orderId = orderResponse.data.orderId;

            const razorpayOrder = await axios.post('/create-razorpay-order', { ...orderData, orderId });
            if (razorpayOrder.data.success) {
                console.log('RazorPay order created successfully');
                const options = {
                    key: razorpayOrder.data.key_id,
                    amount: razorpayOrder.data.order.amount,
                    currency: "INR",
                    name: "Rozeto",
                    description: "Order Payment",
                    order_id: razorpayOrder.data.order.id,
                    handler: function (response) {
                        handlePaymentSuccess(response.razorpay_payment_id, razorpayOrder.data.order.id, orderId);
                    },
                    prefill: {
                        name: razorpayOrder.data.user,
                    },
                    theme: {
                        color: "#3399cc"
                    }
                };
                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    Swal.fire({
                        title: 'Error!',
                        text: 'Payment Failed. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    handlePaymentFailure(orderId);
                });
                rzp.open();
            }
        }
    }
}

async function handlePaymentSuccess(paymentId, razorpayOrderId, orderId) {
    try {
        const paymentResponse = await axios.post('/payment-success', {
            paymentId,
            razorpayOrderId,
            orderId
        });

        if (paymentResponse.data.success) {
            window.location.href = `/orderSuccess?orderId=${orderId}`;
        } else {
            Swal.fire('Payment Failed', paymentResponse.data.message, 'error');
        }
    } catch (error) {
        console.error('Error confirming payment:', error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred while confirming payment. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}

async function handlePaymentFailure(orderId) {
    try {
        const response = await axios.post('/payment-failure', { orderId });

        if (response.data.success) {
            Swal.fire({
                title: 'Order Placed!',
                text: 'Your order has been placed but payment is pending. You can retry the payment from your orders page.',
                icon: 'info',
                confirmButtonText: 'OK'
            }).then(() => {
                window.location.href = `/orderDetails?orderId=${orderId}`;
            });
        }
    } catch (error) {
        console.error('Error handling payment failure:', error);
        Swal.fire({
            title: 'Error!',
            text: 'An error occurred while updating the payment status. Please try again.',
            icon: 'error',
            confirmButtonText: 'OK'
        });
    }
}



</script>









  <script>
     const addressCards = document.querySelectorAll('.address-card');

      addressCards.forEach(card => {
          card.addEventListener('click', () => {
              // Remove selected class from all cards
              addressCards.forEach(c => c.classList.remove('selected'));
              
              // Add selected class to clicked card
              card.classList.add('selected');
              
              // Check corresponding radio button
              card.querySelector('input[type="radio"]').checked = true;
          });
      });

      document.getElementById("toggleAddressForm").addEventListener("click", function () {
        const addressForm = document.getElementById("addressForm");
        if (addressForm.style.display === "none" || addressForm.style.display === "") {
          const radios = document.querySelectorAll('input[name="addressRadio"]');
          radios.forEach(radio => {
              radio.checked = false; // Uncheck each radio button
          });
          addressForm.style.display = "block"; // Show the form
        } else {
          addressForm.style.display = "none"; // Hide the form
        }
      });

        document.addEventListener('DOMContentLoaded', function() {
            const paymentMethodRadios = document.querySelectorAll('input[name="payment-method"]');
            const cardForm = document.getElementById('card-form');

            paymentMethodRadios.forEach(radio => {
                radio.addEventListener('change', function() {
                    if (this.id === 'credit-card-rrr' && this.checked) {
                        cardForm.classList.add('active');
                    } else {
                        cardForm.classList.remove('active');
                    }
                });
            });
        });

        document.getElementById('coupon-toggle').addEventListener('click', function (e) {
        e.preventDefault();
        const couponDropdown = document.getElementById('coupon-dropdown');
        couponDropdown.style.display = couponDropdown.style.display === 'none' || couponDropdown.style.display === '' ? 'block' : 'none';
    });
  </script>

<script>
  // Function to handle coupon removal and update the cart dynamically
  function handleRemoveCoupon(event) {
      event.preventDefault();

      const userId = document.querySelector('#userID')?.textContent.trim();
      if (!userId) return;

      axios.post('/removeCoupon', { userId })
          .then(response => {
              if (response.data.success) {
                  // Update the cart total and remove coupon discount display
                  const couponDiscountElement = document.getElementById('couponDiscount');
                  const cartTotalElement = document.getElementById('cart-total');

                  // Assume the couponDiscount is fetched from the response or is set correctly
                  const couponDiscount = parseFloat(couponDiscountElement?.textContent.replace('₹', '').trim()) || 0;

                  if (cartTotalElement) {
                      const currentTotalText = cartTotalElement.textContent.replace('₹', '').trim();
                      const currentTotal = parseFloat(currentTotalText) || 0;
                      const updatedTotal = (currentTotal + couponDiscount).toFixed(2);
                      cartTotalElement.textContent = `₹ ${updatedTotal}`;
                  }

                  if (couponDiscountElement) {
                      couponDiscountElement.innerHTML = `<strong>-&nbsp;₹&nbsp;0.00</strong>`;
                  }

                  // Remove coupon related elements from the DOM
                  const couponRow = document.getElementById('coupon-row');
                  if (couponRow) {
                      couponRow.remove();
                  }

                  // Display a success message
                  alert('Coupon removed successfully.');
              } else {
                  console.error('Failed to remove coupon. Please try again.');
              }
          })
          .catch(error => {
              console.error('Error removing coupon:', error);
          });
  }
</script>

<script>
  document.getElementById('saveAddressBtn').addEventListener('click', async function () {
    let isValid = true;

    // Clear existing error messages
    document.querySelectorAll('.text-danger').forEach((error) => {
      error.style.display = 'none';
    });

    // Get input values
    const fullName = document.getElementById('fullName').value.trim();
    const phone = document.getElementById('addAddressphone').value.trim();
    const street = document.getElementById('street').value.trim();
    const city = document.getElementById('city').value.trim();
    const state = document.getElementById('state').value.trim();
    const zip = document.getElementById('zip').value.trim();
    const landmark = document.getElementById('landmark').value.trim();
    const altPhone = document.getElementById('addAddressaltphone').value.trim();
    const addressType = document.getElementById("addressType").value;
    const isActive = document.getElementById("isActive").checked;

    // Full Name Validation
    if (!fullName) {
      document.getElementById('fullNameError').style.display = 'block';
      isValid = false;
    }

    // Phone Validation
    const phoneRegex = /^[0-9]{10,15}$/; // Validates phone numbers (10-15 digits)
    if (!phone || !phoneRegex.test(phone)) {
      document.getElementById('addAddressphoneError').style.display = 'block';
      isValid = false;
    }

    // Street Validation
    if (!street) {
      document.getElementById('streetError').style.display = 'block';
      isValid = false;
    }

    // City Validation
    if (!city) {
      document.getElementById('cityError').style.display = 'block';
      isValid = false;
    }

    // State Validation
    if (!state) {
      document.getElementById('stateError').style.display = 'block';
      isValid = false;
    }

    // ZIP Code Validation
    if (!zip || isNaN(zip)) {
      document.getElementById('zipError').style.display = 'block';
      isValid = false;
    }

    // If all fields are valid, submit the form
    if (isValid) {
      const formData = {
          addressType,
          name: fullName,
          phone,
          altPhone,
          locality: street,
          city,
          state,
          pincode: zip,
          landMark: landmark,
          isActive
      };

      try {
          const response = await axios.post(`/addAddress/<%= userId %>`, formData);

          if (response.data.success) {
              Swal.fire({
                  icon: 'success',
                  title: 'Success',
                  text: response.data.message,
                  confirmButtonText: 'OK'
              }).then((result) => {
                  if (result.isConfirmed) {
                      window.location.href = '/checkout';
                  }
              });
          } else {
              Swal.fire({
                  icon: 'error',
                  title: 'Error',
                  text: response.data.message,
                  confirmButtonText: 'OK'
              });
          }
      } catch (error) {
          Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'There was an error adding the address. Please try again later.',
              confirmButtonText: 'OK'
          });
      }
    }
    });


    document.getElementById('coupon-code').addEventListener('click', function() {
        // Create a temporary textarea element
        const tempTextArea = document.createElement('textarea');
        tempTextArea.value = this.textContent;
        document.body.appendChild(tempTextArea);
        
        // Select and copy the text
        tempTextArea.select();
        document.execCommand('copy');
        
        // Remove the temporary textarea
        document.body.removeChild(tempTextArea);
        
        // Visual feedback
        this.classList.add('copied');
        document.getElementById('copy-tooltip').style.display = 'block';
        
        // Reset after 2 seconds
        setTimeout(() => {
            this.classList.remove('copied');
            document.getElementById('copy-tooltip').style.display = 'none';
        }, 2000);
    });

</script>


<script>
  document.addEventListener('DOMContentLoaded', function() {
      const loadMoreButton = document.getElementById('loadMoreCoupons');
      const showLessButton = document.getElementById('showLessCoupons');
      let currentCount = 2;

      loadMoreButton?.addEventListener('click', function() {
          const coupons = <%- JSON.stringify(coupons) %>;
          const couponContainer = document.querySelector('.coupon-container').parentNode;

          if (currentCount < coupons.length) {
              coupons.slice(currentCount, currentCount + 2).forEach(coupon => {
                  const couponElement = document.createElement('div');
                  couponElement.className = 'coupon-container my-3';
                  couponElement.style.marginLeft = '2rem';
                  couponElement.innerHTML = `
                      <div class="coupon-discount">
                          <h3>Save ₹${coupon.offerPrice}</h3>
                      </div>
                      <p class="mb-1">On orders above ₹${coupon.minimumPrice}</p>
                      <p class="mb-2">(Expires on ${new Date(coupon.expireOn).toLocaleDateString()})</p>
                      <div id="coupon-code" class="coupon-code">
                          ${coupon.code}
                      </div>
                      <div id="copy-tooltip">Copied!</div>
                  `;
                  couponContainer.appendChild(couponElement);
              });
              currentCount += 2;

              if (currentCount >= coupons.length) {
                  loadMoreButton.style.display = 'none';
              }

              showLessButton.style.display = 'inline-block';
          }
      });

      showLessButton?.addEventListener('click', function() {
          const couponContainer = document.querySelector('.coupon-container').parentNode;
          const couponsToHide = couponContainer.querySelectorAll('.coupon-container:not(:nth-child(-n+2))');
          couponsToHide.forEach(coupon => coupon.remove());
          currentCount = 2;
          showLessButton.style.display = 'none';
          loadMoreButton.style.display = 'inline-block';
      });
  });
</script>



  <!-- jQery -->
  <script src="js/jquery-3.4.1.min.js"></script>
  <!-- popper js -->
  <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous">
  </script>
  <!-- bootstrap js -->
  <script src="js/bootstrap.js"></script>
  <!-- owl slider -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/OwlCarousel2/2.3.4/owl.carousel.min.js">
  </script>
  <!-- isotope js -->
  <script src="https://unpkg.com/isotope-layout@3.0.4/dist/isotope.pkgd.min.js"></script>
  <!-- nice select -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-nice-select/1.1.0/js/jquery.nice-select.min.js"></script>
  <!-- custom js -->
  <script src="js/custom.js"></script>
  <!-- Google Map -->
  </script>
  <!-- End Google Map -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0-beta1/dist/js/bootstrap.bundle.min.js" integrity="sha384-pprn3073KE6tl6bjs2QrFaJGz5/SUsLqktiwsUTF55Jfv3qYSDhgCecCxMW52nD2" crossorigin="anonymous"></script>
  <script src="https://kit.fontawesome.com/9d892b4fd1.js" crossorigin="anonymous"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>



  <%- include("../../views/partials/user/footer.ejs") %>
